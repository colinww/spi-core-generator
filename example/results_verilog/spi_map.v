/*
 * spi_map.v
 * This file is auto-generated by the make_spi.py script from the spi
 * register map.
 */

module spi_map(
	       // Inputs
	       i_rstb, i_spi_active, vi_data_rx, i_rx_valid, vi_byte_num,
	       // Read-only inputs
               vi_adc_data, vi_dco_freq_count, i_dtst_value_a, i_dtst_value_b,
	       // Write-only outputs
               o_adc_samp, o_clk_step, o_dco_step_clk, o_dcycle_cal_0_step_clk,
               o_dcycle_cal_1_step_clk, o_dlc_f2p_step_clk,
               o_dlc_iir_0_step_clk, o_dlc_iir_1_step_clk,
               o_dlc_iir_2_step_clk, o_dlc_iir_3_step_clk, o_dlc_pi_step_clk,
               o_dlc_qnc_step_clk, o_dlc_step_clk, o_fdelta_cal_0_step_clk,
               o_fdelta_cal_1_step_clk, o_fdelta_lms_0_step_clk,
               o_fdelta_lms_1_step_clk, o_get_dco_freq, o_rfdc_0_step_clk,
               o_rfdc_1_step_clk, o_rfdc_state_0_step_clk,
               o_rfdc_state_1_step_clk, o_srst_dco, o_srst_dlc, o_srst_rfdc_0,
               o_srst_rfdc_1, o_sync_samp_0, o_sync_samp_1,
	       // Registered outputs
               o_adc_pol, vo_atst_dac_sel, o_atst_drive_pad,
               o_atst_pwm_dac_sel, vo_atst_sel, o_clkgen_clk_dco_pol,
               vo_clkgen_clkf_sel, vo_clkgen_clkr_sel, vo_clkgen_clkv_sel,
               vo_clkgen_dco_del, vo_clkgen_dlc_del, vo_clkgen_rfdc_del_0,
               vo_clkgen_rfdc_del_1, vo_dac_data, vo_dco_amp_trim,
               vo_dco_buffer_bias, o_dco_byp_agc, o_dco_ena_div_buffer,
               o_dco_ena_fce_dem, o_dco_hold, o_dco_pol, vo_dco_requant_type,
               vo_dco_tune, vo_dcycle_byp_m_0, vo_dcycle_byp_m_1,
               o_dcycle_cal_0_hold, o_dcycle_cal_1_hold, o_dcycle_ena_cal_0,
               o_dcycle_ena_cal_1, vo_dcycle_hyst_0, vo_dcycle_hyst_1,
               vo_dcycle_target_0, vo_dcycle_target_1, o_dlc_ena_qnc,
               o_dlc_ena_type2, o_dlc_f2p_hold, o_dlc_hold, o_dlc_iir_0_hold,
               o_dlc_iir_1_hold, o_dlc_iir_2_hold, o_dlc_iir_3_hold,
               o_dlc_iir_ena_0, o_dlc_iir_ena_1, o_dlc_iir_ena_2,
               o_dlc_iir_ena_3, o_dlc_pi_hold, o_dlc_qnc_hold, vo_dmro_ifast_0,
               vo_dmro_ifast_1, vo_dmro_islow_0, vo_dmro_islow_1,
               vo_dmro_reg_frc_0, vo_dmro_reg_frc_1, o_dmro_rst_0,
               o_dmro_rst_1, o_dmro_sel_manual_0, o_dmro_sel_manual_1,
               vo_dmro_tune_0, vo_dmro_tune_1, o_dtst_drive_pad_a,
               o_dtst_drive_pad_b, vo_dtst_sel_a, vo_dtst_sel_b, o_ena_dco,
               o_ena_dlc, o_ena_ext_osc, o_ena_fbdiv_0, o_ena_fbdiv_1,
               o_ena_rfdc_0, o_ena_rfdc_1, vo_fdelta_byp_knorm_0,
               vo_fdelta_byp_knorm_1, o_fdelta_cal_0_hold, o_fdelta_cal_1_hold,
               vo_fdelta_cal_gain_0, vo_fdelta_cal_gain_1, o_fdelta_del_v_0,
               o_fdelta_del_v_1, o_fdelta_ena_cal_0, o_fdelta_ena_cal_1,
               o_fdelta_lms_0_hold, o_fdelta_lms_1_hold, vo_frac_alpha,
               vo_freq_meas_sel, o_gate_dco_fast, o_gate_dco_slow, o_gate_dlc,
               o_gate_rfdc_0, o_gate_rfdc_1, o_ibias_sel_ext, vo_iir_pole_0,
               vo_iir_pole_1, vo_iir_pole_2, vo_iir_pole_3, vo_integer_n,
               o_ldo_dco_byp, o_ldo_dco_dis, o_ldo_dig_byp, vo_ldo_dig_trim,
               o_ldo_dmro_byp_0, o_ldo_dmro_byp_1, vo_ldo_dmro_trim_0,
               vo_ldo_dmro_trim_1, vo_ldo_fce_trim, vo_ldo_osc_trim,
               o_ldo_pfd_byp_0, o_ldo_pfd_byp_1, vo_ldo_pfd_trim_0,
               vo_ldo_pfd_trim_1, o_ldo_rfdc_dis_0, o_ldo_rfdc_dis_1,
               vo_ldo_rfdiv_trim, o_ldo_sync_byp_0, o_ldo_sync_byp_1,
               vo_ldo_sync_trim_0, vo_ldo_sync_trim_1, o_ldo_xo_byp,
               o_ldo_xo_dis, vo_ldo_xo_trim, vo_num_ref_periods, vo_pfd_mode_0,
               vo_pfd_mode_1, o_pfd_pol_0, o_pfd_pol_1, vo_pi_ki, vo_pi_km,
               vo_pi_kp, vo_pswap_count_0, vo_pswap_count_1, o_pswap_ena_0,
               o_pswap_ena_1, vo_ref_clk_sel, o_ref_pol_0, o_ref_pol_1,
               o_rfdc_0_hold, o_rfdc_1_hold, vo_rfdc_path_sel, o_rfdc_pol_0,
               o_rfdc_pol_1, o_rfdc_state_0_hold, o_rfdc_state_1_hold,
               o_rng_ena_dco_req, o_rng_ena_dlc_req, o_rng_ena_iir_req_0,
               o_rng_ena_iir_req_1, o_rng_ena_iir_req_2, o_rng_ena_iir_req_3,
               o_rng_ena_pi_req, o_rng_ena_pswap_0, o_rng_ena_pswap_1,
               vo_sync_del_0, vo_sync_del_1, o_sync_mode_0, o_sync_mode_1,
               o_sync_pol_0, o_sync_pol_1,
	       // Outputs
	       vio_data_spi);
  // Global reset
  input 	i_rstb;
  // Data from SPI interface
  input 	i_spi_active;
  input [7:0] 	vi_data_rx;
  input 	i_rx_valid;
  input [2:0] 	vi_byte_num;
  // Data to SPI interface
  inout [7:0] 	vio_data_spi;
  // Static registered outputs (rw)
  output reg         o_adc_pol;
  output reg [3:0]   vo_atst_dac_sel;
  output reg         o_atst_drive_pad;
  output reg         o_atst_pwm_dac_sel;
  output reg [4:0]   vo_atst_sel;
  output reg         o_clkgen_clk_dco_pol;
  output reg [1:0]   vo_clkgen_clkf_sel;
  output reg [1:0]   vo_clkgen_clkr_sel;
  output reg [1:0]   vo_clkgen_clkv_sel;
  output reg [3:0]   vo_clkgen_dco_del;
  output reg [3:0]   vo_clkgen_dlc_del;
  output reg [3:0]   vo_clkgen_rfdc_del_0;
  output reg [3:0]   vo_clkgen_rfdc_del_1;
  output reg [9:0]   vo_dac_data;
  output reg [2:0]   vo_dco_amp_trim;
  output reg [2:0]   vo_dco_buffer_bias;
  output reg         o_dco_byp_agc;
  output reg         o_dco_ena_div_buffer;
  output reg         o_dco_ena_fce_dem;
  output reg         o_dco_hold;
  output reg         o_dco_pol;
  output reg [1:0]   vo_dco_requant_type;
  output reg [6:0]   vo_dco_tune;
  output reg [6:0]   vo_dcycle_byp_m_0;
  output reg [6:0]   vo_dcycle_byp_m_1;
  output reg         o_dcycle_cal_0_hold;
  output reg         o_dcycle_cal_1_hold;
  output reg         o_dcycle_ena_cal_0;
  output reg         o_dcycle_ena_cal_1;
  output reg [3:0]   vo_dcycle_hyst_0;
  output reg [3:0]   vo_dcycle_hyst_1;
  output reg [7:0]   vo_dcycle_target_0;
  output reg [7:0]   vo_dcycle_target_1;
  output reg         o_dlc_ena_qnc;
  output reg         o_dlc_ena_type2;
  output reg         o_dlc_f2p_hold;
  output reg         o_dlc_hold;
  output reg         o_dlc_iir_0_hold;
  output reg         o_dlc_iir_1_hold;
  output reg         o_dlc_iir_2_hold;
  output reg         o_dlc_iir_3_hold;
  output reg         o_dlc_iir_ena_0;
  output reg         o_dlc_iir_ena_1;
  output reg         o_dlc_iir_ena_2;
  output reg         o_dlc_iir_ena_3;
  output reg         o_dlc_pi_hold;
  output reg         o_dlc_qnc_hold;
  output reg [6:0]   vo_dmro_ifast_0;
  output reg [6:0]   vo_dmro_ifast_1;
  output reg [3:0]   vo_dmro_islow_0;
  output reg [3:0]   vo_dmro_islow_1;
  output reg [1:0]   vo_dmro_reg_frc_0;
  output reg [1:0]   vo_dmro_reg_frc_1;
  output reg         o_dmro_rst_0;
  output reg         o_dmro_rst_1;
  output reg         o_dmro_sel_manual_0;
  output reg         o_dmro_sel_manual_1;
  output reg [2:0]   vo_dmro_tune_0;
  output reg [2:0]   vo_dmro_tune_1;
  output reg         o_dtst_drive_pad_a;
  output reg         o_dtst_drive_pad_b;
  output reg [4:0]   vo_dtst_sel_a;
  output reg [4:0]   vo_dtst_sel_b;
  output reg         o_ena_dco;
  output reg         o_ena_dlc;
  output reg         o_ena_ext_osc;
  output reg         o_ena_fbdiv_0;
  output reg         o_ena_fbdiv_1;
  output reg         o_ena_rfdc_0;
  output reg         o_ena_rfdc_1;
  output reg [9:0]   vo_fdelta_byp_knorm_0;
  output reg [9:0]   vo_fdelta_byp_knorm_1;
  output reg         o_fdelta_cal_0_hold;
  output reg         o_fdelta_cal_1_hold;
  output reg [2:0]   vo_fdelta_cal_gain_0;
  output reg [2:0]   vo_fdelta_cal_gain_1;
  output reg         o_fdelta_del_v_0;
  output reg         o_fdelta_del_v_1;
  output reg         o_fdelta_ena_cal_0;
  output reg         o_fdelta_ena_cal_1;
  output reg         o_fdelta_lms_0_hold;
  output reg         o_fdelta_lms_1_hold;
  output reg [15:0]  vo_frac_alpha;
  output reg [1:0]   vo_freq_meas_sel;
  output reg         o_gate_dco_fast;
  output reg         o_gate_dco_slow;
  output reg         o_gate_dlc;
  output reg         o_gate_rfdc_0;
  output reg         o_gate_rfdc_1;
  output reg         o_ibias_sel_ext;
  output reg [2:0]   vo_iir_pole_0;
  output reg [2:0]   vo_iir_pole_1;
  output reg [2:0]   vo_iir_pole_2;
  output reg [2:0]   vo_iir_pole_3;
  output reg [7:0]   vo_integer_n;
  output reg         o_ldo_dco_byp;
  output reg         o_ldo_dco_dis;
  output reg         o_ldo_dig_byp;
  output reg [2:0]   vo_ldo_dig_trim;
  output reg         o_ldo_dmro_byp_0;
  output reg         o_ldo_dmro_byp_1;
  output reg [2:0]   vo_ldo_dmro_trim_0;
  output reg [2:0]   vo_ldo_dmro_trim_1;
  output reg [2:0]   vo_ldo_fce_trim;
  output reg [2:0]   vo_ldo_osc_trim;
  output reg         o_ldo_pfd_byp_0;
  output reg         o_ldo_pfd_byp_1;
  output reg [2:0]   vo_ldo_pfd_trim_0;
  output reg [2:0]   vo_ldo_pfd_trim_1;
  output reg         o_ldo_rfdc_dis_0;
  output reg         o_ldo_rfdc_dis_1;
  output reg [2:0]   vo_ldo_rfdiv_trim;
  output reg         o_ldo_sync_byp_0;
  output reg         o_ldo_sync_byp_1;
  output reg [2:0]   vo_ldo_sync_trim_0;
  output reg [2:0]   vo_ldo_sync_trim_1;
  output reg         o_ldo_xo_byp;
  output reg         o_ldo_xo_dis;
  output reg [2:0]   vo_ldo_xo_trim;
  output reg [1:0]   vo_num_ref_periods;
  output reg [1:0]   vo_pfd_mode_0;
  output reg [1:0]   vo_pfd_mode_1;
  output reg         o_pfd_pol_0;
  output reg         o_pfd_pol_1;
  output reg [3:0]   vo_pi_ki;
  output reg [1:0]   vo_pi_km;
  output reg [3:0]   vo_pi_kp;
  output reg [5:0]   vo_pswap_count_0;
  output reg [5:0]   vo_pswap_count_1;
  output reg         o_pswap_ena_0;
  output reg         o_pswap_ena_1;
  output reg [1:0]   vo_ref_clk_sel;
  output reg         o_ref_pol_0;
  output reg         o_ref_pol_1;
  output reg         o_rfdc_0_hold;
  output reg         o_rfdc_1_hold;
  output reg [1:0]   vo_rfdc_path_sel;
  output reg         o_rfdc_pol_0;
  output reg         o_rfdc_pol_1;
  output reg         o_rfdc_state_0_hold;
  output reg         o_rfdc_state_1_hold;
  output reg         o_rng_ena_dco_req;
  output reg         o_rng_ena_dlc_req;
  output reg         o_rng_ena_iir_req_0;
  output reg         o_rng_ena_iir_req_1;
  output reg         o_rng_ena_iir_req_2;
  output reg         o_rng_ena_iir_req_3;
  output reg         o_rng_ena_pi_req;
  output reg         o_rng_ena_pswap_0;
  output reg         o_rng_ena_pswap_1;
  output reg [3:0]   vo_sync_del_0;
  output reg [3:0]   vo_sync_del_1;
  output reg         o_sync_mode_0;
  output reg         o_sync_mode_1;
  output reg         o_sync_pol_0;
  output reg         o_sync_pol_1;
  // Shadow register read-only inputs (ro)
  input      [7:0]   vi_adc_data;
  input      [15:0]  vi_dco_freq_count;
  input              i_dtst_value_a;
  input              i_dtst_value_b;
  // Pulsed write-only outputs (wo)
  output            o_adc_samp;
  output            o_clk_step;
  output            o_dco_step_clk;
  output            o_dcycle_cal_0_step_clk;
  output            o_dcycle_cal_1_step_clk;
  output            o_dlc_f2p_step_clk;
  output            o_dlc_iir_0_step_clk;
  output            o_dlc_iir_1_step_clk;
  output            o_dlc_iir_2_step_clk;
  output            o_dlc_iir_3_step_clk;
  output            o_dlc_pi_step_clk;
  output            o_dlc_qnc_step_clk;
  output            o_dlc_step_clk;
  output            o_fdelta_cal_0_step_clk;
  output            o_fdelta_cal_1_step_clk;
  output            o_fdelta_lms_0_step_clk;
  output            o_fdelta_lms_1_step_clk;
  output            o_get_dco_freq;
  output            o_rfdc_0_step_clk;
  output            o_rfdc_1_step_clk;
  output            o_rfdc_state_0_step_clk;
  output            o_rfdc_state_1_step_clk;
  output            o_srst_dco;
  output            o_srst_dlc;
  output            o_srst_rfdc_0;
  output            o_srst_rfdc_1;
  output            o_sync_samp_0;
  output            o_sync_samp_1;
  // Latched data to be sent back
  reg [7:0] 	r_data_to_send;
  /*
   * Create a local reset signal that is used for state machine registers
   */
  wire active = i_rstb && i_spi_active;
  /*
   * Latch in the opcode, which is byte 0 of the data
   * If reading from the map, drive the data bus to the SPI during byte 2
   * Latch in the address, which is byte 1 of the data
   */
  reg [7:0] 	rv_opcode;
  reg 		r_read_map;
  reg 		r_write_map;
  reg [7:0] 	rv_addr;
  always @( posedge i_rx_valid or negedge active ) begin : opcode_fsm
    if ( !active ) begin
      rv_opcode <= 0;
      r_read_map <= 0;
      r_write_map <= 0;
      rv_addr <= 0;
    end else begin
      // Load opcode
      if ( 0 == vi_byte_num )
	rv_opcode <= vi_data_rx;
      // Load address
      if ( 1 == vi_byte_num )
	rv_addr <= vi_data_rx;
      // Determine what to do after address is received
      if ( 1 == vi_byte_num ) begin
	if ( 32 == rv_opcode )
	  r_write_map <= 1;
	else
	  r_write_map <= 0;
	if ( 48 == rv_opcode )
	  r_read_map <= 1;
	else
	  r_read_map <= 0;
      end
    end // else: !if( !active )
  end // block: opcode_fsm
  /*
   * All the registered fields are written in this section.
   */
  always @( posedge i_rx_valid or negedge i_rstb ) begin
    if ( !i_rstb ) begin
      o_gate_dco_fast <= 0;
      o_gate_rfdc_1 <= 0;
      o_gate_rfdc_0 <= 0;
      o_gate_dco_slow <= 0;
      o_gate_dlc <= 0;
      vo_clkgen_clkf_sel <= 0;
      vo_clkgen_clkv_sel <= 0;
      vo_clkgen_clkr_sel <= 0;
      o_clkgen_clk_dco_pol <= 0;
      vo_clkgen_rfdc_del_0 <= 0;
      vo_clkgen_rfdc_del_1 <= 0;
      vo_clkgen_dlc_del <= 0;
      vo_clkgen_dco_del <= 0;
      o_ena_dlc <= 0;
      o_ena_rfdc_1 <= 0;
      o_ena_rfdc_0 <= 0;
      o_ena_fbdiv_0 <= 0;
      o_ena_fbdiv_1 <= 0;
      o_ena_ext_osc <= 0;
      o_ena_dco <= 0;
      o_ldo_dco_dis <= 0;
      o_ldo_dig_byp <= 0;
      vo_ldo_dig_trim <= 0;
      o_ldo_dco_byp <= 0;
      o_ldo_xo_byp <= 0;
      o_ldo_xo_dis <= 0;
      o_ldo_sync_byp_0 <= 0;
      o_ldo_sync_byp_1 <= 0;
      o_ldo_rfdc_dis_1 <= 0;
      o_ldo_rfdc_dis_0 <= 0;
      o_ldo_pfd_byp_0 <= 0;
      o_ldo_pfd_byp_1 <= 0;
      o_ldo_dmro_byp_1 <= 0;
      o_ldo_dmro_byp_0 <= 0;
      vo_ldo_osc_trim <= 0;
      vo_ldo_xo_trim <= 0;
      vo_ldo_fce_trim <= 0;
      vo_ldo_rfdiv_trim <= 0;
      vo_ldo_dmro_trim_1 <= 0;
      vo_ldo_dmro_trim_0 <= 0;
      vo_ldo_pfd_trim_0 <= 0;
      vo_ldo_pfd_trim_1 <= 0;
      vo_ldo_sync_trim_0 <= 0;
      vo_ldo_sync_trim_1 <= 0;
      vo_ref_clk_sel <= 0;
      o_ibias_sel_ext <= 0;
      o_ref_pol_1 <= 0;
      o_ref_pol_0 <= 0;
      o_dco_ena_div_buffer <= 0;
      o_dco_byp_agc <= 0;
      vo_dco_amp_trim <= 0;
      vo_dco_buffer_bias <= 0;
      o_dco_ena_fce_dem <= 0;
      o_dco_pol <= 0;
      vo_dco_requant_type <= 0;
      vo_dco_tune <= 0;
      o_fdelta_ena_cal_0 <= 0;
      vo_fdelta_cal_gain_0 <= 0;
      o_fdelta_del_v_0 <= 0;
      vo_fdelta_byp_knorm_0 <= 0;
      vo_fdelta_byp_knorm_0 <= 0;
      o_fdelta_ena_cal_1 <= 0;
      vo_fdelta_cal_gain_1 <= 0;
      o_fdelta_del_v_1 <= 0;
      vo_fdelta_byp_knorm_1 <= 0;
      vo_fdelta_byp_knorm_1 <= 0;
      vo_dcycle_hyst_0 <= 0;
      o_dcycle_ena_cal_0 <= 0;
      vo_dcycle_target_0 <= 0;
      vo_dcycle_byp_m_0 <= 0;
      vo_dcycle_hyst_1 <= 0;
      o_dcycle_ena_cal_1 <= 0;
      vo_dcycle_target_1 <= 0;
      vo_dcycle_byp_m_1 <= 0;
      o_rng_ena_pswap_0 <= 0;
      vo_pswap_count_0 <= 0;
      o_pswap_ena_0 <= 0;
      o_rng_ena_pswap_1 <= 0;
      vo_pswap_count_1 <= 0;
      o_pswap_ena_1 <= 0;
      o_dmro_sel_manual_0 <= 0;
      o_dmro_sel_manual_1 <= 0;
      o_dmro_rst_1 <= 0;
      o_dmro_rst_0 <= 0;
      vo_dmro_reg_frc_0 <= 0;
      vo_dmro_reg_frc_1 <= 0;
      vo_dmro_ifast_0 <= 0;
      vo_dmro_tune_0 <= 0;
      vo_dmro_islow_0 <= 0;
      vo_dmro_ifast_1 <= 0;
      vo_dmro_tune_1 <= 0;
      vo_dmro_islow_1 <= 0;
      o_sync_pol_0 <= 0;
      o_sync_mode_0 <= 0;
      vo_sync_del_0 <= 0;
      o_sync_pol_1 <= 0;
      o_sync_mode_1 <= 0;
      vo_sync_del_1 <= 0;
      o_pfd_pol_0 <= 0;
      o_pfd_pol_1 <= 0;
      vo_pfd_mode_1 <= 0;
      vo_pfd_mode_0 <= 0;
      vo_integer_n <= 0;
      vo_frac_alpha <= 0;
      vo_frac_alpha <= 0;
      vo_rfdc_path_sel <= 0;
      o_dlc_ena_qnc <= 0;
      o_rfdc_pol_0 <= 0;
      o_rfdc_pol_1 <= 0;
      o_dlc_ena_type2 <= 0;
      vo_pi_km <= 0;
      vo_pi_ki <= 0;
      vo_pi_kp <= 0;
      vo_iir_pole_0 <= 0;
      vo_iir_pole_1 <= 0;
      o_dlc_iir_ena_1 <= 0;
      o_dlc_iir_ena_0 <= 0;
      vo_iir_pole_2 <= 0;
      vo_iir_pole_3 <= 0;
      o_dlc_iir_ena_3 <= 0;
      o_dlc_iir_ena_2 <= 0;
      o_rng_ena_dlc_req <= 0;
      o_rng_ena_iir_req_1 <= 0;
      o_rng_ena_dco_req <= 0;
      o_rng_ena_pi_req <= 0;
      o_rng_ena_iir_req_0 <= 0;
      o_rng_ena_iir_req_2 <= 0;
      o_rng_ena_iir_req_3 <= 0;
      o_rfdc_state_0_hold <= 0;
      o_rfdc_1_hold <= 0;
      o_rfdc_state_1_hold <= 0;
      o_rfdc_0_hold <= 0;
      o_dlc_iir_0_hold <= 0;
      o_dlc_iir_2_hold <= 0;
      o_dlc_iir_3_hold <= 0;
      o_dlc_iir_1_hold <= 0;
      o_dlc_hold <= 0;
      o_dlc_pi_hold <= 0;
      o_dlc_qnc_hold <= 0;
      o_dlc_f2p_hold <= 0;
      o_dco_hold <= 0;
      o_fdelta_cal_0_hold <= 0;
      o_fdelta_lms_0_hold <= 0;
      o_fdelta_cal_1_hold <= 0;
      o_fdelta_lms_1_hold <= 0;
      o_dcycle_cal_0_hold <= 0;
      o_dcycle_cal_1_hold <= 0;
      vo_atst_sel <= 0;
      o_adc_pol <= 0;
      o_atst_drive_pad <= 0;
      vo_dac_data <= 0;
      vo_dac_data <= 0;
      vo_atst_dac_sel <= 0;
      o_atst_pwm_dac_sel <= 0;
      vo_dtst_sel_a <= 0;
      o_dtst_drive_pad_a <= 0;
      vo_dtst_sel_b <= 0;
      o_dtst_drive_pad_b <= 0;
      vo_freq_meas_sel <= 0;
      vo_num_ref_periods <= 0;
    end else begin
      if (( 1 == rv_addr ) && r_write_map ) begin
        o_gate_dco_fast <= vi_data_rx[4];
        o_gate_rfdc_1 <= vi_data_rx[1];
        o_gate_rfdc_0 <= vi_data_rx[0];
        o_gate_dco_slow <= vi_data_rx[3];
        o_gate_dlc <= vi_data_rx[2];
      end
      if (( 2 == rv_addr ) && r_write_map ) begin
        vo_clkgen_clkf_sel <= vi_data_rx[5:4];
        vo_clkgen_clkv_sel <= vi_data_rx[3:2];
        vo_clkgen_clkr_sel <= vi_data_rx[1:0];
        o_clkgen_clk_dco_pol <= vi_data_rx[6];
      end
      if (( 3 == rv_addr ) && r_write_map ) begin
        vo_clkgen_rfdc_del_0 <= vi_data_rx[3:0];
        vo_clkgen_rfdc_del_1 <= vi_data_rx[7:4];
      end
      if (( 4 == rv_addr ) && r_write_map ) begin
        vo_clkgen_dlc_del <= vi_data_rx[3:0];
        vo_clkgen_dco_del <= vi_data_rx[7:4];
      end
      if (( 5 == rv_addr ) && r_write_map ) begin
        o_ena_dlc <= vi_data_rx[2];
        o_ena_rfdc_1 <= vi_data_rx[1];
        o_ena_rfdc_0 <= vi_data_rx[0];
        o_ena_fbdiv_0 <= vi_data_rx[4];
        o_ena_fbdiv_1 <= vi_data_rx[5];
        o_ena_ext_osc <= vi_data_rx[6];
        o_ena_dco <= vi_data_rx[3];
      end
      if (( 6 == rv_addr ) && r_write_map ) begin
        o_ldo_dco_dis <= vi_data_rx[1];
        o_ldo_dig_byp <= vi_data_rx[2];
        vo_ldo_dig_trim <= vi_data_rx[7:5];
        o_ldo_dco_byp <= vi_data_rx[0];
        o_ldo_xo_byp <= vi_data_rx[3];
        o_ldo_xo_dis <= vi_data_rx[4];
      end
      if (( 7 == rv_addr ) && r_write_map ) begin
        o_ldo_sync_byp_0 <= vi_data_rx[2];
        o_ldo_sync_byp_1 <= vi_data_rx[6];
        o_ldo_rfdc_dis_1 <= vi_data_rx[4];
        o_ldo_rfdc_dis_0 <= vi_data_rx[0];
        o_ldo_pfd_byp_0 <= vi_data_rx[1];
        o_ldo_pfd_byp_1 <= vi_data_rx[5];
        o_ldo_dmro_byp_1 <= vi_data_rx[7];
        o_ldo_dmro_byp_0 <= vi_data_rx[3];
      end
      if (( 8 == rv_addr ) && r_write_map ) begin
        vo_ldo_osc_trim <= vi_data_rx[5:3];
        vo_ldo_xo_trim <= vi_data_rx[2:0];
      end
      if (( 9 == rv_addr ) && r_write_map ) begin
        vo_ldo_fce_trim <= vi_data_rx[2:0];
        vo_ldo_rfdiv_trim <= vi_data_rx[5:3];
      end
      if (( 10 == rv_addr ) && r_write_map ) begin
        vo_ldo_dmro_trim_1 <= vi_data_rx[6:4];
        vo_ldo_dmro_trim_0 <= vi_data_rx[2:0];
      end
      if (( 11 == rv_addr ) && r_write_map ) begin
        vo_ldo_pfd_trim_0 <= vi_data_rx[2:0];
        vo_ldo_pfd_trim_1 <= vi_data_rx[6:4];
      end
      if (( 12 == rv_addr ) && r_write_map ) begin
        vo_ldo_sync_trim_0 <= vi_data_rx[2:0];
        vo_ldo_sync_trim_1 <= vi_data_rx[6:4];
      end
      if (( 13 == rv_addr ) && r_write_map ) begin
        vo_ref_clk_sel <= vi_data_rx[2:1];
        o_ibias_sel_ext <= vi_data_rx[0];
        o_ref_pol_1 <= vi_data_rx[4];
        o_ref_pol_0 <= vi_data_rx[3];
      end
      if (( 14 == rv_addr ) && r_write_map ) begin
        o_dco_ena_div_buffer <= vi_data_rx[3];
        o_dco_byp_agc <= vi_data_rx[7];
        vo_dco_amp_trim <= vi_data_rx[6:4];
        vo_dco_buffer_bias <= vi_data_rx[2:0];
      end
      if (( 15 == rv_addr ) && r_write_map ) begin
        o_dco_ena_fce_dem <= vi_data_rx[1];
        o_dco_pol <= vi_data_rx[0];
        vo_dco_requant_type <= vi_data_rx[3:2];
      end
      if (( 16 == rv_addr ) && r_write_map ) begin
        vo_dco_tune <= vi_data_rx[6:0];
      end
      if (( 17 == rv_addr ) && r_write_map ) begin
        o_fdelta_ena_cal_0 <= vi_data_rx[0];
        vo_fdelta_cal_gain_0 <= vi_data_rx[3:1];
        o_fdelta_del_v_0 <= vi_data_rx[4];
        vo_fdelta_byp_knorm_0[9:8] <= vi_data_rx[7:6];
      end
      if (( 18 == rv_addr ) && r_write_map ) begin
        vo_fdelta_byp_knorm_0[7:0] <= vi_data_rx[7:0];
      end
      if (( 19 == rv_addr ) && r_write_map ) begin
        o_fdelta_ena_cal_1 <= vi_data_rx[0];
        vo_fdelta_cal_gain_1 <= vi_data_rx[3:1];
        o_fdelta_del_v_1 <= vi_data_rx[4];
        vo_fdelta_byp_knorm_1[9:8] <= vi_data_rx[7:6];
      end
      if (( 20 == rv_addr ) && r_write_map ) begin
        vo_fdelta_byp_knorm_1[7:0] <= vi_data_rx[7:0];
      end
      if (( 21 == rv_addr ) && r_write_map ) begin
        vo_dcycle_hyst_0 <= vi_data_rx[4:1];
        o_dcycle_ena_cal_0 <= vi_data_rx[0];
      end
      if (( 22 == rv_addr ) && r_write_map ) begin
        vo_dcycle_target_0 <= vi_data_rx[7:0];
      end
      if (( 23 == rv_addr ) && r_write_map ) begin
        vo_dcycle_byp_m_0 <= vi_data_rx[6:0];
      end
      if (( 24 == rv_addr ) && r_write_map ) begin
        vo_dcycle_hyst_1 <= vi_data_rx[4:1];
        o_dcycle_ena_cal_1 <= vi_data_rx[0];
      end
      if (( 25 == rv_addr ) && r_write_map ) begin
        vo_dcycle_target_1 <= vi_data_rx[7:0];
      end
      if (( 26 == rv_addr ) && r_write_map ) begin
        vo_dcycle_byp_m_1 <= vi_data_rx[6:0];
      end
      if (( 27 == rv_addr ) && r_write_map ) begin
        o_rng_ena_pswap_0 <= vi_data_rx[1];
        vo_pswap_count_0 <= vi_data_rx[7:2];
        o_pswap_ena_0 <= vi_data_rx[0];
      end
      if (( 28 == rv_addr ) && r_write_map ) begin
        o_rng_ena_pswap_1 <= vi_data_rx[1];
        vo_pswap_count_1 <= vi_data_rx[7:2];
        o_pswap_ena_1 <= vi_data_rx[0];
      end
      if (( 29 == rv_addr ) && r_write_map ) begin
        o_dmro_sel_manual_0 <= vi_data_rx[3];
        o_dmro_sel_manual_1 <= vi_data_rx[7];
        o_dmro_rst_1 <= vi_data_rx[6];
        o_dmro_rst_0 <= vi_data_rx[2];
        vo_dmro_reg_frc_0 <= vi_data_rx[1:0];
        vo_dmro_reg_frc_1 <= vi_data_rx[5:4];
      end
      if (( 30 == rv_addr ) && r_write_map ) begin
        vo_dmro_ifast_0 <= vi_data_rx[6:0];
      end
      if (( 31 == rv_addr ) && r_write_map ) begin
        vo_dmro_tune_0 <= vi_data_rx[6:4];
        vo_dmro_islow_0 <= vi_data_rx[3:0];
      end
      if (( 32 == rv_addr ) && r_write_map ) begin
        vo_dmro_ifast_1 <= vi_data_rx[6:0];
      end
      if (( 33 == rv_addr ) && r_write_map ) begin
        vo_dmro_tune_1 <= vi_data_rx[6:4];
        vo_dmro_islow_1 <= vi_data_rx[3:0];
      end
      if (( 34 == rv_addr ) && r_write_map ) begin
        o_sync_pol_0 <= vi_data_rx[4];
        o_sync_mode_0 <= vi_data_rx[5];
        vo_sync_del_0 <= vi_data_rx[3:0];
      end
      if (( 35 == rv_addr ) && r_write_map ) begin
        o_sync_pol_1 <= vi_data_rx[4];
        o_sync_mode_1 <= vi_data_rx[5];
        vo_sync_del_1 <= vi_data_rx[3:0];
      end
      if (( 36 == rv_addr ) && r_write_map ) begin
        o_pfd_pol_0 <= vi_data_rx[0];
        o_pfd_pol_1 <= vi_data_rx[4];
        vo_pfd_mode_1 <= vi_data_rx[6:5];
        vo_pfd_mode_0 <= vi_data_rx[2:1];
      end
      if (( 37 == rv_addr ) && r_write_map ) begin
        vo_integer_n <= vi_data_rx[7:0];
      end
      if (( 38 == rv_addr ) && r_write_map ) begin
        vo_frac_alpha[7:0] <= vi_data_rx[7:0];
      end
      if (( 39 == rv_addr ) && r_write_map ) begin
        vo_frac_alpha[15:8] <= vi_data_rx[7:0];
      end
      if (( 40 == rv_addr ) && r_write_map ) begin
        vo_rfdc_path_sel <= vi_data_rx[1:0];
        o_dlc_ena_qnc <= vi_data_rx[4];
        o_rfdc_pol_0 <= vi_data_rx[2];
        o_rfdc_pol_1 <= vi_data_rx[3];
        o_dlc_ena_type2 <= vi_data_rx[5];
        vo_pi_km <= vi_data_rx[7:6];
      end
      if (( 41 == rv_addr ) && r_write_map ) begin
        vo_pi_ki <= vi_data_rx[7:4];
        vo_pi_kp <= vi_data_rx[3:0];
      end
      if (( 42 == rv_addr ) && r_write_map ) begin
        vo_iir_pole_0 <= vi_data_rx[3:1];
        vo_iir_pole_1 <= vi_data_rx[7:5];
        o_dlc_iir_ena_1 <= vi_data_rx[4];
        o_dlc_iir_ena_0 <= vi_data_rx[0];
      end
      if (( 43 == rv_addr ) && r_write_map ) begin
        vo_iir_pole_2 <= vi_data_rx[3:1];
        vo_iir_pole_3 <= vi_data_rx[7:5];
        o_dlc_iir_ena_3 <= vi_data_rx[4];
        o_dlc_iir_ena_2 <= vi_data_rx[0];
      end
      if (( 44 == rv_addr ) && r_write_map ) begin
        o_rng_ena_dlc_req <= vi_data_rx[4];
        o_rng_ena_iir_req_1 <= vi_data_rx[1];
        o_rng_ena_dco_req <= vi_data_rx[6];
        o_rng_ena_pi_req <= vi_data_rx[5];
        o_rng_ena_iir_req_0 <= vi_data_rx[0];
        o_rng_ena_iir_req_2 <= vi_data_rx[2];
        o_rng_ena_iir_req_3 <= vi_data_rx[3];
      end
      if (( 45 == rv_addr ) && r_write_map ) begin
        o_rfdc_state_0_hold <= vi_data_rx[0];
        o_rfdc_1_hold <= vi_data_rx[6];
        o_rfdc_state_1_hold <= vi_data_rx[4];
        o_rfdc_0_hold <= vi_data_rx[2];
      end
      if (( 46 == rv_addr ) && r_write_map ) begin
        o_dlc_iir_0_hold <= vi_data_rx[0];
        o_dlc_iir_2_hold <= vi_data_rx[4];
        o_dlc_iir_3_hold <= vi_data_rx[6];
        o_dlc_iir_1_hold <= vi_data_rx[2];
      end
      if (( 47 == rv_addr ) && r_write_map ) begin
        o_dlc_hold <= vi_data_rx[6];
        o_dlc_pi_hold <= vi_data_rx[4];
        o_dlc_qnc_hold <= vi_data_rx[2];
        o_dlc_f2p_hold <= vi_data_rx[0];
      end
      if (( 48 == rv_addr ) && r_write_map ) begin
        o_dco_hold <= vi_data_rx[0];
      end
      if (( 49 == rv_addr ) && r_write_map ) begin
        o_fdelta_cal_0_hold <= vi_data_rx[0];
        o_fdelta_lms_0_hold <= vi_data_rx[2];
        o_fdelta_cal_1_hold <= vi_data_rx[4];
        o_fdelta_lms_1_hold <= vi_data_rx[6];
      end
      if (( 50 == rv_addr ) && r_write_map ) begin
        o_dcycle_cal_0_hold <= vi_data_rx[0];
        o_dcycle_cal_1_hold <= vi_data_rx[4];
      end
      if (( 51 == rv_addr ) && r_write_map ) begin
        vo_atst_sel <= vi_data_rx[4:0];
        o_adc_pol <= vi_data_rx[6];
        o_atst_drive_pad <= vi_data_rx[7];
      end
      if (( 53 == rv_addr ) && r_write_map ) begin
        vo_dac_data[7:0] <= vi_data_rx[7:0];
      end
      if (( 54 == rv_addr ) && r_write_map ) begin
        vo_dac_data[9:8] <= vi_data_rx[1:0];
        vo_atst_dac_sel <= vi_data_rx[5:2];
        o_atst_pwm_dac_sel <= vi_data_rx[6];
      end
      if (( 55 == rv_addr ) && r_write_map ) begin
        vo_dtst_sel_a <= vi_data_rx[4:0];
        o_dtst_drive_pad_a <= vi_data_rx[5];
      end
      if (( 56 == rv_addr ) && r_write_map ) begin
        vo_dtst_sel_b <= vi_data_rx[4:0];
        o_dtst_drive_pad_b <= vi_data_rx[5];
      end
      if (( 57 == rv_addr ) && r_write_map ) begin
        vo_freq_meas_sel <= vi_data_rx[5:4];
        vo_num_ref_periods <= vi_data_rx[7:6];
      end
    end
  end 
  /*
   * All the write-only outputs which are passed through are in this section.
   */
  reg r_pulse_0;
  reg r_pulse_1;
  reg r_pulse_34;
  reg r_pulse_35;
  reg r_pulse_45;
  reg r_pulse_46;
  reg r_pulse_47;
  reg r_pulse_48;
  reg r_pulse_49;
  reg r_pulse_50;
  reg r_pulse_51;
  reg r_pulse_57;
  always @( posedge i_rx_valid or negedge active ) begin
    if ( !active ) begin
      r_pulse_0 <= 0;
      r_pulse_1 <= 0;
      r_pulse_34 <= 0;
      r_pulse_35 <= 0;
      r_pulse_45 <= 0;
      r_pulse_46 <= 0;
      r_pulse_47 <= 0;
      r_pulse_48 <= 0;
      r_pulse_49 <= 0;
      r_pulse_50 <= 0;
      r_pulse_51 <= 0;
      r_pulse_57 <= 0;
    end else begin
      if (( 2 == vi_byte_num ) && (r_write_map )) begin
        if ( 0 == rv_addr )
          r_pulse_0 <= 1;
        if ( 1 == rv_addr )
          r_pulse_1 <= 1;
        if ( 34 == rv_addr )
          r_pulse_34 <= 1;
        if ( 35 == rv_addr )
          r_pulse_35 <= 1;
        if ( 45 == rv_addr )
          r_pulse_45 <= 1;
        if ( 46 == rv_addr )
          r_pulse_46 <= 1;
        if ( 47 == rv_addr )
          r_pulse_47 <= 1;
        if ( 48 == rv_addr )
          r_pulse_48 <= 1;
        if ( 49 == rv_addr )
          r_pulse_49 <= 1;
        if ( 50 == rv_addr )
          r_pulse_50 <= 1;
        if ( 51 == rv_addr )
          r_pulse_51 <= 1;
        if ( 57 == rv_addr )
          r_pulse_57 <= 1;
      end
    end
  end
  assign o_srst_rfdc_0 = vi_data_rx[0] && r_pulse_0;
  assign o_srst_rfdc_1 = vi_data_rx[1] && r_pulse_0;
  assign o_srst_dco = vi_data_rx[3] && r_pulse_0;
  assign o_srst_dlc = vi_data_rx[2] && r_pulse_0;
  assign o_clk_step = vi_data_rx[5] && r_pulse_1;
  assign o_sync_samp_0 = vi_data_rx[6] && r_pulse_34;
  assign o_sync_samp_1 = vi_data_rx[6] && r_pulse_35;
  assign o_rfdc_state_1_step_clk = vi_data_rx[5] && r_pulse_45;
  assign o_rfdc_1_step_clk = vi_data_rx[7] && r_pulse_45;
  assign o_rfdc_0_step_clk = vi_data_rx[3] && r_pulse_45;
  assign o_rfdc_state_0_step_clk = vi_data_rx[1] && r_pulse_45;
  assign o_dlc_iir_0_step_clk = vi_data_rx[1] && r_pulse_46;
  assign o_dlc_iir_1_step_clk = vi_data_rx[3] && r_pulse_46;
  assign o_dlc_iir_3_step_clk = vi_data_rx[7] && r_pulse_46;
  assign o_dlc_iir_2_step_clk = vi_data_rx[5] && r_pulse_46;
  assign o_dlc_qnc_step_clk = vi_data_rx[3] && r_pulse_47;
  assign o_dlc_step_clk = vi_data_rx[7] && r_pulse_47;
  assign o_dlc_pi_step_clk = vi_data_rx[5] && r_pulse_47;
  assign o_dlc_f2p_step_clk = vi_data_rx[1] && r_pulse_47;
  assign o_dco_step_clk = vi_data_rx[1] && r_pulse_48;
  assign o_fdelta_cal_1_step_clk = vi_data_rx[5] && r_pulse_49;
  assign o_fdelta_cal_0_step_clk = vi_data_rx[1] && r_pulse_49;
  assign o_fdelta_lms_1_step_clk = vi_data_rx[7] && r_pulse_49;
  assign o_fdelta_lms_0_step_clk = vi_data_rx[3] && r_pulse_49;
  assign o_dcycle_cal_1_step_clk = vi_data_rx[5] && r_pulse_50;
  assign o_dcycle_cal_0_step_clk = vi_data_rx[1] && r_pulse_50;
  assign o_adc_samp = vi_data_rx[5] && r_pulse_51;
  assign o_get_dco_freq = vi_data_rx[0] && r_pulse_57;
  /*
   * All the reading is handled here, both from registered fields and shadowed data.
   */
  // Combinationl logic that indicates from which register data is being read
  wire read_addr_1 = ( 1 == vi_data_rx ) && ( 1 == vi_byte_num );
  wire read_addr_2 = ( 2 == vi_data_rx ) && ( 1 == vi_byte_num );
  wire read_addr_3 = ( 3 == vi_data_rx ) && ( 1 == vi_byte_num );
  wire read_addr_4 = ( 4 == vi_data_rx ) && ( 1 == vi_byte_num );
  wire read_addr_5 = ( 5 == vi_data_rx ) && ( 1 == vi_byte_num );
  wire read_addr_6 = ( 6 == vi_data_rx ) && ( 1 == vi_byte_num );
  wire read_addr_7 = ( 7 == vi_data_rx ) && ( 1 == vi_byte_num );
  wire read_addr_8 = ( 8 == vi_data_rx ) && ( 1 == vi_byte_num );
  wire read_addr_9 = ( 9 == vi_data_rx ) && ( 1 == vi_byte_num );
  wire read_addr_10 = ( 10 == vi_data_rx ) && ( 1 == vi_byte_num );
  wire read_addr_11 = ( 11 == vi_data_rx ) && ( 1 == vi_byte_num );
  wire read_addr_12 = ( 12 == vi_data_rx ) && ( 1 == vi_byte_num );
  wire read_addr_13 = ( 13 == vi_data_rx ) && ( 1 == vi_byte_num );
  wire read_addr_14 = ( 14 == vi_data_rx ) && ( 1 == vi_byte_num );
  wire read_addr_15 = ( 15 == vi_data_rx ) && ( 1 == vi_byte_num );
  wire read_addr_16 = ( 16 == vi_data_rx ) && ( 1 == vi_byte_num );
  wire read_addr_17 = ( 17 == vi_data_rx ) && ( 1 == vi_byte_num );
  wire read_addr_18 = ( 18 == vi_data_rx ) && ( 1 == vi_byte_num );
  wire read_addr_19 = ( 19 == vi_data_rx ) && ( 1 == vi_byte_num );
  wire read_addr_20 = ( 20 == vi_data_rx ) && ( 1 == vi_byte_num );
  wire read_addr_21 = ( 21 == vi_data_rx ) && ( 1 == vi_byte_num );
  wire read_addr_22 = ( 22 == vi_data_rx ) && ( 1 == vi_byte_num );
  wire read_addr_23 = ( 23 == vi_data_rx ) && ( 1 == vi_byte_num );
  wire read_addr_24 = ( 24 == vi_data_rx ) && ( 1 == vi_byte_num );
  wire read_addr_25 = ( 25 == vi_data_rx ) && ( 1 == vi_byte_num );
  wire read_addr_26 = ( 26 == vi_data_rx ) && ( 1 == vi_byte_num );
  wire read_addr_27 = ( 27 == vi_data_rx ) && ( 1 == vi_byte_num );
  wire read_addr_28 = ( 28 == vi_data_rx ) && ( 1 == vi_byte_num );
  wire read_addr_29 = ( 29 == vi_data_rx ) && ( 1 == vi_byte_num );
  wire read_addr_30 = ( 30 == vi_data_rx ) && ( 1 == vi_byte_num );
  wire read_addr_31 = ( 31 == vi_data_rx ) && ( 1 == vi_byte_num );
  wire read_addr_32 = ( 32 == vi_data_rx ) && ( 1 == vi_byte_num );
  wire read_addr_33 = ( 33 == vi_data_rx ) && ( 1 == vi_byte_num );
  wire read_addr_34 = ( 34 == vi_data_rx ) && ( 1 == vi_byte_num );
  wire read_addr_35 = ( 35 == vi_data_rx ) && ( 1 == vi_byte_num );
  wire read_addr_36 = ( 36 == vi_data_rx ) && ( 1 == vi_byte_num );
  wire read_addr_37 = ( 37 == vi_data_rx ) && ( 1 == vi_byte_num );
  wire read_addr_38 = ( 38 == vi_data_rx ) && ( 1 == vi_byte_num );
  wire read_addr_39 = ( 39 == vi_data_rx ) && ( 1 == vi_byte_num );
  wire read_addr_40 = ( 40 == vi_data_rx ) && ( 1 == vi_byte_num );
  wire read_addr_41 = ( 41 == vi_data_rx ) && ( 1 == vi_byte_num );
  wire read_addr_42 = ( 42 == vi_data_rx ) && ( 1 == vi_byte_num );
  wire read_addr_43 = ( 43 == vi_data_rx ) && ( 1 == vi_byte_num );
  wire read_addr_44 = ( 44 == vi_data_rx ) && ( 1 == vi_byte_num );
  wire read_addr_45 = ( 45 == vi_data_rx ) && ( 1 == vi_byte_num );
  wire read_addr_46 = ( 46 == vi_data_rx ) && ( 1 == vi_byte_num );
  wire read_addr_47 = ( 47 == vi_data_rx ) && ( 1 == vi_byte_num );
  wire read_addr_48 = ( 48 == vi_data_rx ) && ( 1 == vi_byte_num );
  wire read_addr_49 = ( 49 == vi_data_rx ) && ( 1 == vi_byte_num );
  wire read_addr_50 = ( 50 == vi_data_rx ) && ( 1 == vi_byte_num );
  wire read_addr_51 = ( 51 == vi_data_rx ) && ( 1 == vi_byte_num );
  wire read_addr_52 = ( 52 == vi_data_rx ) && ( 1 == vi_byte_num );
  wire read_addr_53 = ( 53 == vi_data_rx ) && ( 1 == vi_byte_num );
  wire read_addr_54 = ( 54 == vi_data_rx ) && ( 1 == vi_byte_num );
  wire read_addr_55 = ( 55 == vi_data_rx ) && ( 1 == vi_byte_num );
  wire read_addr_56 = ( 56 == vi_data_rx ) && ( 1 == vi_byte_num );
  wire read_addr_57 = ( 57 == vi_data_rx ) && ( 1 == vi_byte_num );
  wire read_addr_58 = ( 58 == vi_data_rx ) && ( 1 == vi_byte_num );
  wire read_addr_59 = ( 59 == vi_data_rx ) && ( 1 == vi_byte_num );
  // Data is read on rising edge of second rx_valid pulse (byte 1)
  always @( posedge i_rx_valid or negedge active ) begin
    if ( !active ) begin
      r_data_to_send <= 0;
    end else begin
      if ( read_addr_1 )
        r_data_to_send <= {3'b000,o_gate_dco_fast,o_gate_dco_slow,o_gate_dlc,o_gate_rfdc_1,o_gate_rfdc_0};
      if ( read_addr_2 )
        r_data_to_send <= {1'b0,o_clkgen_clk_dco_pol,vo_clkgen_clkf_sel,vo_clkgen_clkv_sel,vo_clkgen_clkr_sel};
      if ( read_addr_3 )
        r_data_to_send <= {vo_clkgen_rfdc_del_1,vo_clkgen_rfdc_del_0};
      if ( read_addr_4 )
        r_data_to_send <= {vo_clkgen_dco_del,vo_clkgen_dlc_del};
      if ( read_addr_5 )
        r_data_to_send <= {1'b0,o_ena_ext_osc,o_ena_fbdiv_1,o_ena_fbdiv_0,o_ena_dco,o_ena_dlc,o_ena_rfdc_1,o_ena_rfdc_0};
      if ( read_addr_6 )
        r_data_to_send <= {vo_ldo_dig_trim,o_ldo_xo_dis,o_ldo_xo_byp,o_ldo_dig_byp,o_ldo_dco_dis,o_ldo_dco_byp};
      if ( read_addr_7 )
        r_data_to_send <= {o_ldo_dmro_byp_1,o_ldo_sync_byp_1,o_ldo_pfd_byp_1,o_ldo_rfdc_dis_1,o_ldo_dmro_byp_0,o_ldo_sync_byp_0,o_ldo_pfd_byp_0,o_ldo_rfdc_dis_0};
      if ( read_addr_8 )
        r_data_to_send <= {2'b00,vo_ldo_osc_trim,vo_ldo_xo_trim};
      if ( read_addr_9 )
        r_data_to_send <= {2'b00,vo_ldo_rfdiv_trim,vo_ldo_fce_trim};
      if ( read_addr_10 )
        r_data_to_send <= {1'b0,vo_ldo_dmro_trim_1,1'b0,vo_ldo_dmro_trim_0};
      if ( read_addr_11 )
        r_data_to_send <= {1'b0,vo_ldo_pfd_trim_1,1'b0,vo_ldo_pfd_trim_0};
      if ( read_addr_12 )
        r_data_to_send <= {1'b0,vo_ldo_sync_trim_1,1'b0,vo_ldo_sync_trim_0};
      if ( read_addr_13 )
        r_data_to_send <= {3'b000,o_ref_pol_1,o_ref_pol_0,vo_ref_clk_sel,o_ibias_sel_ext};
      if ( read_addr_14 )
        r_data_to_send <= {o_dco_byp_agc,vo_dco_amp_trim,o_dco_ena_div_buffer,vo_dco_buffer_bias};
      if ( read_addr_15 )
        r_data_to_send <= {4'b0000,vo_dco_requant_type,o_dco_ena_fce_dem,o_dco_pol};
      if ( read_addr_16 )
        r_data_to_send <= {1'b0,vo_dco_tune};
      if ( read_addr_17 )
        r_data_to_send <= {vo_fdelta_byp_knorm_0[9:8],1'b0,o_fdelta_del_v_0,vo_fdelta_cal_gain_0,o_fdelta_ena_cal_0};
      if ( read_addr_18 )
        r_data_to_send <= {vo_fdelta_byp_knorm_0[7:0]};
      if ( read_addr_19 )
        r_data_to_send <= {vo_fdelta_byp_knorm_1[9:8],1'b0,o_fdelta_del_v_1,vo_fdelta_cal_gain_1,o_fdelta_ena_cal_1};
      if ( read_addr_20 )
        r_data_to_send <= {vo_fdelta_byp_knorm_1[7:0]};
      if ( read_addr_21 )
        r_data_to_send <= {3'b000,vo_dcycle_hyst_0,o_dcycle_ena_cal_0};
      if ( read_addr_22 )
        r_data_to_send <= {vo_dcycle_target_0};
      if ( read_addr_23 )
        r_data_to_send <= {1'b0,vo_dcycle_byp_m_0};
      if ( read_addr_24 )
        r_data_to_send <= {3'b000,vo_dcycle_hyst_1,o_dcycle_ena_cal_1};
      if ( read_addr_25 )
        r_data_to_send <= {vo_dcycle_target_1};
      if ( read_addr_26 )
        r_data_to_send <= {1'b0,vo_dcycle_byp_m_1};
      if ( read_addr_27 )
        r_data_to_send <= {vo_pswap_count_0,o_rng_ena_pswap_0,o_pswap_ena_0};
      if ( read_addr_28 )
        r_data_to_send <= {vo_pswap_count_1,o_rng_ena_pswap_1,o_pswap_ena_1};
      if ( read_addr_29 )
        r_data_to_send <= {o_dmro_sel_manual_1,o_dmro_rst_1,vo_dmro_reg_frc_1,o_dmro_sel_manual_0,o_dmro_rst_0,vo_dmro_reg_frc_0};
      if ( read_addr_30 )
        r_data_to_send <= {1'b0,vo_dmro_ifast_0};
      if ( read_addr_31 )
        r_data_to_send <= {1'b0,vo_dmro_tune_0,vo_dmro_islow_0};
      if ( read_addr_32 )
        r_data_to_send <= {1'b0,vo_dmro_ifast_1};
      if ( read_addr_33 )
        r_data_to_send <= {1'b0,vo_dmro_tune_1,vo_dmro_islow_1};
      if ( read_addr_34 )
        r_data_to_send <= {2'b00,o_sync_mode_0,o_sync_pol_0,vo_sync_del_0};
      if ( read_addr_35 )
        r_data_to_send <= {2'b00,o_sync_mode_1,o_sync_pol_1,vo_sync_del_1};
      if ( read_addr_36 )
        r_data_to_send <= {1'b0,vo_pfd_mode_1,o_pfd_pol_1,1'b0,vo_pfd_mode_0,o_pfd_pol_0};
      if ( read_addr_37 )
        r_data_to_send <= {vo_integer_n};
      if ( read_addr_38 )
        r_data_to_send <= {vo_frac_alpha[7:0]};
      if ( read_addr_39 )
        r_data_to_send <= {vo_frac_alpha[15:8]};
      if ( read_addr_40 )
        r_data_to_send <= {vo_pi_km,o_dlc_ena_type2,o_dlc_ena_qnc,o_rfdc_pol_1,o_rfdc_pol_0,vo_rfdc_path_sel};
      if ( read_addr_41 )
        r_data_to_send <= {vo_pi_ki,vo_pi_kp};
      if ( read_addr_42 )
        r_data_to_send <= {vo_iir_pole_1,o_dlc_iir_ena_1,vo_iir_pole_0,o_dlc_iir_ena_0};
      if ( read_addr_43 )
        r_data_to_send <= {vo_iir_pole_3,o_dlc_iir_ena_3,vo_iir_pole_2,o_dlc_iir_ena_2};
      if ( read_addr_44 )
        r_data_to_send <= {1'b0,o_rng_ena_dco_req,o_rng_ena_pi_req,o_rng_ena_dlc_req,o_rng_ena_iir_req_3,o_rng_ena_iir_req_2,o_rng_ena_iir_req_1,o_rng_ena_iir_req_0};
      if ( read_addr_45 )
        r_data_to_send <= {1'b0,o_rfdc_1_hold,1'b0,o_rfdc_state_1_hold,1'b0,o_rfdc_0_hold,1'b0,o_rfdc_state_0_hold};
      if ( read_addr_46 )
        r_data_to_send <= {1'b0,o_dlc_iir_3_hold,1'b0,o_dlc_iir_2_hold,1'b0,o_dlc_iir_1_hold,1'b0,o_dlc_iir_0_hold};
      if ( read_addr_47 )
        r_data_to_send <= {1'b0,o_dlc_hold,1'b0,o_dlc_pi_hold,1'b0,o_dlc_qnc_hold,1'b0,o_dlc_f2p_hold};
      if ( read_addr_48 )
        r_data_to_send <= {7'b0000000,o_dco_hold};
      if ( read_addr_49 )
        r_data_to_send <= {1'b0,o_fdelta_lms_1_hold,1'b0,o_fdelta_cal_1_hold,1'b0,o_fdelta_lms_0_hold,1'b0,o_fdelta_cal_0_hold};
      if ( read_addr_50 )
        r_data_to_send <= {3'b000,o_dcycle_cal_1_hold,3'b000,o_dcycle_cal_0_hold};
      if ( read_addr_51 )
        r_data_to_send <= {o_atst_drive_pad,o_adc_pol,1'b0,vo_atst_sel};
      if ( read_addr_52 )
        r_data_to_send <= {vi_adc_data};
      if ( read_addr_53 )
        r_data_to_send <= {vo_dac_data[7:0]};
      if ( read_addr_54 )
        r_data_to_send <= {1'b0,o_atst_pwm_dac_sel,vo_atst_dac_sel,vo_dac_data[9:8]};
      if ( read_addr_55 )
        r_data_to_send <= {1'b0,i_dtst_value_a,o_dtst_drive_pad_a,vo_dtst_sel_a};
      if ( read_addr_56 )
        r_data_to_send <= {1'b0,i_dtst_value_b,o_dtst_drive_pad_b,vo_dtst_sel_b};
      if ( read_addr_57 )
        r_data_to_send <= {vo_num_ref_periods,vo_freq_meas_sel,4'b0000};
      if ( read_addr_58 )
        r_data_to_send <= {vi_dco_freq_count[7:0]};
      if ( read_addr_59 )
        r_data_to_send <= {vi_dco_freq_count[15:8]};
    end
  end
  /*
   * Only drive the bus when reading from the map, during byte 2.
   */
  assign vio_data_spi = r_read_map ? r_data_to_send : 8'bz;
endmodule // spi_map